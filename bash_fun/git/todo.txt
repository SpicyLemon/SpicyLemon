TODO:
    Write a README.md
    Create a function/script that will help analyze merge conflicts.
        It should take in a filepath to a file with merge conflicts.
        Then it'll create the different versions of the file in a temp dir.
        Then diff them in a way that highlights word-level changes.
            Or at least give it the ability to do word-level changes in an easy way.
        Then it'll use multidiff to diff them.
            Git adds the markers <<<<<<<, =======, and >>>>>>> to the file.
            Something I have in my setup will also have a ||||||| marker.
            I think this is what each marker means:
            * <<<<<<< - The start of a conflict. The lines after it are what the current branch had before starting the merge.
            * ======= - End of the lines that the current branch had before the start of the merge. The lines after it are the lines from the other version (that's getting merged in).
            * ||||||| - (optional) End of the lines from the other version that's getting merged in. The lines after it are the lines from the file as it existed in the common ancestor.
            * >>>>>>> - End of the conflict section.
            Sometimes the markers have branch/commit info after it, but I can't remember the exact formatting right now.
        By default, it should show just the first conflict.
        It should have options that allow the following:
            * Show the first n conflicts
            * Show all conflicts
            * Show specific conflicts (defined by index). E.g. show just the 3rd and 7th conflicts.
    Create a function/script to get a file/folder link in github.
        At least start with github. I'd have to look into other places to see how their url paths differ.
        Example github links:
            dir: https://github.com/cosmos/cosmos-sdk/tree/main/client
            file: https://github.com/cosmos/cosmos-sdk/blob/main/client/account_retriever.go
            line number: https://github.com/cosmos/cosmos-sdk/blob/main/client/account_retriever.go#L9
            line numbers: https://github.com/cosmos/cosmos-sdk/blob/main/client/account_retriever.go#L9-L14
            raw file: https://raw.githubusercontent.com/cosmos/cosmos-sdk/main/client/account_retriever.go
        github url format: https://github.com/{repo}/{type}/{branch}/{path}
            repo: Get this from `git remote get-url origin`. Will need to parse it out.
                Examples: git@github.com:provenance-io/provenance.git => provenance-io/provenance
                          https://github.com/cosmos/cosmos-sdk.git => cosmos/cosmos-sdk
                If https, maybe just remove the .git. If SSH, swap out everything before and including the first : with https://github.com
            type: "blob" for files, "tree" for directories. Will need to test locally to see which to use.
            branch: Get this from `git branch --show-current`.
            path: Get this as input to the function/script.
            Maybe create the config entry spicylemon.linkurl (similar to spicylemon.defaultbranch).
                If that's there, use that instead of trying to parse it out.
        Have flags to override the repo, type, and branch.
        Have flag for adding line numbers.
            Bonus points for being able to provide a function name to scan the file and add the correct line numbers for it.
        Will need to do a trick (or something) get take in relative filepaths and get their full path relative to the repo root.
        Maybe also look into the `gh` command line tool to see if there's something already there for this.
        Example gitlab links:
            dir: https://gitlab.com/emaris/frontend/-/tree/master/requirement
            file: https://gitlab.com/emaris/frontend/-/blob/master/requirement/api.ts
            line number: https://gitlab.com/emaris/frontend/-/blob/master/requirement/api.ts#L4
            line numbers: https://gitlab.com/emaris/frontend/-/blob/master/requirement/api.ts#L4-6
    Create a git log explorer.
        Same layout as git_diff_explorer.
        Use `git log --pretty='format:%C(auto,bold)%cs%Creset %C(auto)%h%d %s'` for the selectable area.
        Use `git_diff_explorer <hash> --compact-summary` for the preview.
        Have hotkeys that switches the preview to remove/add the `--compact-summary`.
            Or maybe just include the full diff after the compact summary.
